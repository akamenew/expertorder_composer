<?php
/**
 * Order
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Push-API
 *
 * API zur Ãœbermittlung der Bestellungen an das ExpertOrder Kassensoftware.<br><br><p style=\"font-size:1.5rem;\"><b><h1>Verwenden Sie die folgenden Daten zu Testzwecken:</b><br>PUT: https://osp.expertorder.de/testPush<br>API_KEY: 9615d48a-cc88-4c3e-8e43-102047366a71</p>
 *
 * The version of the OpenAPI document: 1.0.2
 * Contact: support@expertorder.de
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 7.1.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * Order Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class Order implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'order';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'version' => 'int',
        'broker' => 'string',
        'from_mobile' => 'bool',
        'client_ip' => 'string',
        'id' => 'string',
        'oldid' => 'string',
        'ordertime' => '\DateTime',
        'deliverytime' => '\DateTime',
        'customerinfo' => 'string',
        'orderprice' => 'float',
        'orderdiscount' => 'float',
        'bonuscard' => 'string',
        'notification' => 'bool',
        'deliverycost' => 'float',
        'tip' => 'float',
        'customer' => '\OpenAPI\Client\Model\Customer',
        'payment' => '\OpenAPI\Client\Model\Payment',
        'items' => '\OpenAPI\Client\Model\Item[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'version' => null,
        'broker' => null,
        'from_mobile' => null,
        'client_ip' => null,
        'id' => null,
        'oldid' => null,
        'ordertime' => 'date-time',
        'deliverytime' => 'date-time',
        'customerinfo' => null,
        'orderprice' => null,
        'orderdiscount' => null,
        'bonuscard' => null,
        'notification' => null,
        'deliverycost' => null,
        'tip' => null,
        'customer' => null,
        'payment' => null,
        'items' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'version' => false,
		'broker' => false,
		'from_mobile' => false,
		'client_ip' => false,
		'id' => false,
		'oldid' => false,
		'ordertime' => false,
		'deliverytime' => false,
		'customerinfo' => false,
		'orderprice' => false,
		'orderdiscount' => false,
		'bonuscard' => false,
		'notification' => false,
		'deliverycost' => false,
		'tip' => false,
		'customer' => false,
		'payment' => false,
		'items' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'version' => 'version',
        'broker' => 'broker',
        'from_mobile' => 'fromMobile',
        'client_ip' => 'clientIp',
        'id' => 'id',
        'oldid' => 'oldid',
        'ordertime' => 'ordertime',
        'deliverytime' => 'deliverytime',
        'customerinfo' => 'customerinfo',
        'orderprice' => 'orderprice',
        'orderdiscount' => 'orderdiscount',
        'bonuscard' => 'bonuscard',
        'notification' => 'notification',
        'deliverycost' => 'deliverycost',
        'tip' => 'tip',
        'customer' => 'customer',
        'payment' => 'payment',
        'items' => 'items'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'version' => 'setVersion',
        'broker' => 'setBroker',
        'from_mobile' => 'setFromMobile',
        'client_ip' => 'setClientIp',
        'id' => 'setId',
        'oldid' => 'setOldid',
        'ordertime' => 'setOrdertime',
        'deliverytime' => 'setDeliverytime',
        'customerinfo' => 'setCustomerinfo',
        'orderprice' => 'setOrderprice',
        'orderdiscount' => 'setOrderdiscount',
        'bonuscard' => 'setBonuscard',
        'notification' => 'setNotification',
        'deliverycost' => 'setDeliverycost',
        'tip' => 'setTip',
        'customer' => 'setCustomer',
        'payment' => 'setPayment',
        'items' => 'setItems'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'version' => 'getVersion',
        'broker' => 'getBroker',
        'from_mobile' => 'getFromMobile',
        'client_ip' => 'getClientIp',
        'id' => 'getId',
        'oldid' => 'getOldid',
        'ordertime' => 'getOrdertime',
        'deliverytime' => 'getDeliverytime',
        'customerinfo' => 'getCustomerinfo',
        'orderprice' => 'getOrderprice',
        'orderdiscount' => 'getOrderdiscount',
        'bonuscard' => 'getBonuscard',
        'notification' => 'getNotification',
        'deliverycost' => 'getDeliverycost',
        'tip' => 'getTip',
        'customer' => 'getCustomer',
        'payment' => 'getPayment',
        'items' => 'getItems'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('version', $data ?? [], null);
        $this->setIfExists('broker', $data ?? [], null);
        $this->setIfExists('from_mobile', $data ?? [], null);
        $this->setIfExists('client_ip', $data ?? [], null);
        $this->setIfExists('id', $data ?? [], null);
        $this->setIfExists('oldid', $data ?? [], null);
        $this->setIfExists('ordertime', $data ?? [], null);
        $this->setIfExists('deliverytime', $data ?? [], null);
        $this->setIfExists('customerinfo', $data ?? [], null);
        $this->setIfExists('orderprice', $data ?? [], null);
        $this->setIfExists('orderdiscount', $data ?? [], null);
        $this->setIfExists('bonuscard', $data ?? [], null);
        $this->setIfExists('notification', $data ?? [], null);
        $this->setIfExists('deliverycost', $data ?? [], null);
        $this->setIfExists('tip', $data ?? [], null);
        $this->setIfExists('customer', $data ?? [], null);
        $this->setIfExists('payment', $data ?? [], null);
        $this->setIfExists('items', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['version'] === null) {
            $invalidProperties[] = "'version' can't be null";
        }
        if ($this->container['broker'] === null) {
            $invalidProperties[] = "'broker' can't be null";
        }
        if ($this->container['id'] === null) {
            $invalidProperties[] = "'id' can't be null";
        }
        if ($this->container['ordertime'] === null) {
            $invalidProperties[] = "'ordertime' can't be null";
        }
        if ($this->container['deliverytime'] === null) {
            $invalidProperties[] = "'deliverytime' can't be null";
        }
        if ($this->container['orderprice'] === null) {
            $invalidProperties[] = "'orderprice' can't be null";
        }
        if ($this->container['orderdiscount'] === null) {
            $invalidProperties[] = "'orderdiscount' can't be null";
        }
        if ($this->container['customer'] === null) {
            $invalidProperties[] = "'customer' can't be null";
        }
        if ($this->container['payment'] === null) {
            $invalidProperties[] = "'payment' can't be null";
        }
        if ($this->container['items'] === null) {
            $invalidProperties[] = "'items' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets version
     *
     * @return int
     */
    public function getVersion()
    {
        return $this->container['version'];
    }

    /**
     * Sets version
     *
     * @param int $version Format-Version. Aktuell = 1
     *
     * @return self
     */
    public function setVersion($version)
    {
        if (is_null($version)) {
            throw new \InvalidArgumentException('non-nullable version cannot be null');
        }
        $this->container['version'] = $version;

        return $this;
    }

    /**
     * Gets broker
     *
     * @return string
     */
    public function getBroker()
    {
        return $this->container['broker'];
    }

    /**
     * Sets broker
     *
     * @param string $broker Name des OnlineshopsProvider
     *
     * @return self
     */
    public function setBroker($broker)
    {
        if (is_null($broker)) {
            throw new \InvalidArgumentException('non-nullable broker cannot be null');
        }
        $this->container['broker'] = $broker;

        return $this;
    }

    /**
     * Gets from_mobile
     *
     * @return bool|null
     */
    public function getFromMobile()
    {
        return $this->container['from_mobile'];
    }

    /**
     * Sets from_mobile
     *
     * @param bool|null $from_mobile true, wenn der Kunde mit dem Smartphone bestellt hat
     *
     * @return self
     */
    public function setFromMobile($from_mobile)
    {
        if (is_null($from_mobile)) {
            throw new \InvalidArgumentException('non-nullable from_mobile cannot be null');
        }
        $this->container['from_mobile'] = $from_mobile;

        return $this;
    }

    /**
     * Gets client_ip
     *
     * @return string|null
     */
    public function getClientIp()
    {
        return $this->container['client_ip'];
    }

    /**
     * Sets client_ip
     *
     * @param string|null $client_ip die IP Adresse des Kundens
     *
     * @return self
     */
    public function setClientIp($client_ip)
    {
        if (is_null($client_ip)) {
            throw new \InvalidArgumentException('non-nullable client_ip cannot be null');
        }
        $this->container['client_ip'] = $client_ip;

        return $this;
    }

    /**
     * Gets id
     *
     * @return string
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param string $id OSP-Eindeutige ID der Bestellung
     *
     * @return self
     */
    public function setId($id)
    {
        if (is_null($id)) {
            throw new \InvalidArgumentException('non-nullable id cannot be null');
        }
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets oldid
     *
     * @return string|null
     */
    public function getOldid()
    {
        return $this->container['oldid'];
    }

    /**
     * Sets oldid
     *
     * @param string|null $oldid Wenn die Bestellung eine Ã„nderung ist, dann steht hier die ID der Bestellung, die geÃ¤ndert werden soll
     *
     * @return self
     */
    public function setOldid($oldid)
    {
        if (is_null($oldid)) {
            throw new \InvalidArgumentException('non-nullable oldid cannot be null');
        }
        $this->container['oldid'] = $oldid;

        return $this;
    }

    /**
     * Gets ordertime
     *
     * @return \DateTime
     */
    public function getOrdertime()
    {
        return $this->container['ordertime'];
    }

    /**
     * Sets ordertime
     *
     * @param \DateTime $ordertime Die Zeit, wann die Bestellung erstellt wurde. Format \"yyyy-MM-dd'T'HH:mm:ss.SSS'Z'\"
     *
     * @return self
     */
    public function setOrdertime($ordertime)
    {
        if (is_null($ordertime)) {
            throw new \InvalidArgumentException('non-nullable ordertime cannot be null');
        }
        $this->container['ordertime'] = $ordertime;

        return $this;
    }

    /**
     * Gets deliverytime
     *
     * @return \DateTime
     */
    public function getDeliverytime()
    {
        return $this->container['deliverytime'];
    }

    /**
     * Sets deliverytime
     *
     * @param \DateTime $deliverytime Die gewÃ¼nschte Lieferzeit. Wenn die Zeit nicht festgelegt wurde, dann soll diese Zeit gleich der Zeit der Bestellung sein. Format \"yyyy-MM-dd'T'HH:mm:ss.SSS'Z'\"
     *
     * @return self
     */
    public function setDeliverytime($deliverytime)
    {
        if (is_null($deliverytime)) {
            throw new \InvalidArgumentException('non-nullable deliverytime cannot be null');
        }
        $this->container['deliverytime'] = $deliverytime;

        return $this;
    }

    /**
     * Gets customerinfo
     *
     * @return string|null
     */
    public function getCustomerinfo()
    {
        return $this->container['customerinfo'];
    }

    /**
     * Sets customerinfo
     *
     * @param string|null $customerinfo ZusÃ¤tzliche Information des Kundens
     *
     * @return self
     */
    public function setCustomerinfo($customerinfo)
    {
        if (is_null($customerinfo)) {
            throw new \InvalidArgumentException('non-nullable customerinfo cannot be null');
        }
        $this->container['customerinfo'] = $customerinfo;

        return $this;
    }

    /**
     * Gets orderprice
     *
     * @return float
     */
    public function getOrderprice()
    {
        return $this->container['orderprice'];
    }

    /**
     * Sets orderprice
     *
     * @param float $orderprice Gesamtpreis der Bestellung
     *
     * @return self
     */
    public function setOrderprice($orderprice)
    {
        if (is_null($orderprice)) {
            throw new \InvalidArgumentException('non-nullable orderprice cannot be null');
        }
        $this->container['orderprice'] = $orderprice;

        return $this;
    }

    /**
     * Gets orderdiscount
     *
     * @return float
     */
    public function getOrderdiscount()
    {
        return $this->container['orderdiscount'];
    }

    /**
     * Sets orderdiscount
     *
     * @param float $orderdiscount Rabatt. Absoluter Betrag. Muss negativ sein.
     *
     * @return self
     */
    public function setOrderdiscount($orderdiscount)
    {
        if (is_null($orderdiscount)) {
            throw new \InvalidArgumentException('non-nullable orderdiscount cannot be null');
        }
        $this->container['orderdiscount'] = $orderdiscount;

        return $this;
    }

    /**
     * Gets bonuscard
     *
     * @return string|null
     */
    public function getBonuscard()
    {
        return $this->container['bonuscard'];
    }

    /**
     * Sets bonuscard
     *
     * @param string|null $bonuscard Die Nummer der Bonuskarte
     *
     * @return self
     */
    public function setBonuscard($bonuscard)
    {
        if (is_null($bonuscard)) {
            throw new \InvalidArgumentException('non-nullable bonuscard cannot be null');
        }
        $this->container['bonuscard'] = $bonuscard;

        return $this;
    }

    /**
     * Gets notification
     *
     * @return bool|null
     */
    public function getNotification()
    {
        return $this->container['notification'];
    }

    /**
     * Sets notification
     *
     * @param bool|null $notification Gibt an, ob der Kunde keine Lieferung wÃ¼nscht, sondern selbst abholen mÃ¶chte.
     *
     * @return self
     */
    public function setNotification($notification)
    {
        if (is_null($notification)) {
            throw new \InvalidArgumentException('non-nullable notification cannot be null');
        }
        $this->container['notification'] = $notification;

        return $this;
    }

    /**
     * Gets deliverycost
     *
     * @return float|null
     */
    public function getDeliverycost()
    {
        return $this->container['deliverycost'];
    }

    /**
     * Sets deliverycost
     *
     * @param float|null $deliverycost Lieferkosten
     *
     * @return self
     */
    public function setDeliverycost($deliverycost)
    {
        if (is_null($deliverycost)) {
            throw new \InvalidArgumentException('non-nullable deliverycost cannot be null');
        }
        $this->container['deliverycost'] = $deliverycost;

        return $this;
    }

    /**
     * Gets tip
     *
     * @return float|null
     */
    public function getTip()
    {
        return $this->container['tip'];
    }

    /**
     * Sets tip
     *
     * @param float|null $tip Trinkgeld
     *
     * @return self
     */
    public function setTip($tip)
    {
        if (is_null($tip)) {
            throw new \InvalidArgumentException('non-nullable tip cannot be null');
        }
        $this->container['tip'] = $tip;

        return $this;
    }

    /**
     * Gets customer
     *
     * @return \OpenAPI\Client\Model\Customer
     */
    public function getCustomer()
    {
        return $this->container['customer'];
    }

    /**
     * Sets customer
     *
     * @param \OpenAPI\Client\Model\Customer $customer customer
     *
     * @return self
     */
    public function setCustomer($customer)
    {
        if (is_null($customer)) {
            throw new \InvalidArgumentException('non-nullable customer cannot be null');
        }
        $this->container['customer'] = $customer;

        return $this;
    }

    /**
     * Gets payment
     *
     * @return \OpenAPI\Client\Model\Payment
     */
    public function getPayment()
    {
        return $this->container['payment'];
    }

    /**
     * Sets payment
     *
     * @param \OpenAPI\Client\Model\Payment $payment payment
     *
     * @return self
     */
    public function setPayment($payment)
    {
        if (is_null($payment)) {
            throw new \InvalidArgumentException('non-nullable payment cannot be null');
        }
        $this->container['payment'] = $payment;

        return $this;
    }

    /**
     * Gets items
     *
     * @return \OpenAPI\Client\Model\Item[]
     */
    public function getItems()
    {
        return $this->container['items'];
    }

    /**
     * Sets items
     *
     * @param \OpenAPI\Client\Model\Item[] $items items
     *
     * @return self
     */
    public function setItems($items)
    {
        if (is_null($items)) {
            throw new \InvalidArgumentException('non-nullable items cannot be null');
        }
        $this->container['items'] = $items;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


